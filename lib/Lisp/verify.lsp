
(defmacro verify(test res)
  `(let ((t0 ',test)(t1 ,test)(r1 ,res))
     (strformat "%s = %s" (if (equal t1 r1) "OK" (concat "FAIL:" t1)) t0 )))
     
(verify (+ 2 3) 5)
(verify (+ 0 1) 1)
(verify (- 2 3) -1)
(verify (/ 3 2) 1.5)
(verify (* 2 3) 6)
(verify (null t) nil)
(verify (null nil) t)
(verify (list 2 3) '(2 3))
(verify (not 2) nil)
(verify (not nil) t)
(verify (and nil 8) nil)
(verify (and 7 8) 8)
(verify (or nil 9) 9)
(verify (or 9 nil) 9)
(verify (or nil nil) nil)
(verify (equal nil nil) t)
(verify (equal nil t) nil)
(verify (equal 5 5) t)
(verify (equal 'a 'a) t)
(verify (equal '(a b) '(a b)) t)
(verify (cond (t 7)) 7)
(verify (cond (nil 8)(t 7)) 7)
(verify (cond (t 8)(t 7)) 8)
(verify (when t 6) 6)
(verify (when nil 6) nil)
(verify (when t 6 7) 7)
(verify (append '(a b) '(c d)) '(a b c d))
(verify (reverse '(1 2 3)) '(3 2 1))
(verify (memq 'b '(a b c)) '(b c))
(verify (nth 2 '(a b c)) 'c)
(verify (list* 1 2 3) '( 1 2 . 3))
(verify (last '(a b c)) '(c))
(verify (unless nil 7 8) 8)
(verify (first '(a b c)) 'a)
(verify (rest '(a b c)) '(b c))
(verify (second '(a b c)) 'b)
(verify (third '(a b c)) 'c)
(verify (caar '((a) b c)) 'a)
(verify (cadr '((a e) (b) c)) '(b))
(verify (cdar '((a e) (b) c)) '(e))
(verify (cddr '(a (b) c)) '(c))
(verify (cdddr '(a (b) c e)) '(e))
(verify (cadar '((a b) (b) c e)) 'b)
(verify (let ((n 0)) (dolist (x '(1 2 3)) (incf n x)) n) 6)
(verify (add 1 2 3) 6)
(verify (foldl #'- 0 '(1 2 3)) 2)







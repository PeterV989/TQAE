
QuickApp.ERDoc = {
['='] = ", Assignment operator. a = 17",
['%'] = ", Modulo operator. 5 % 3 == 2",
['*'] = ", Multiplication operator",
['+'] = ", Addition operator",
['-'] = ", Substraction operator",
['/'] = ", Division operator",
['<'] = ", Less-than operator",
['<='] = ", Less-than-or-equal operator",
['=='] = ", Equal operator",
['>'] = ", Greater-than operator",
['>='] = ", Greater-than-or-equal operator",
['HM'] = [[(t), Convert time to HH:MM string. log('Time is %s',HM(now)) == 'Time is 10:45']],
['HMS'] = "(t), Convert time to HH:MM:SS string.",
['add'] = "(l,v), Add element v to table l",
['again'] = "(n), ",
['average'] = "(...), Calculate average of list of values",
['cancel'] = "(r), ",
['date'] = "(str), Cron test",
['dawn'] = ", Variable with down time",
['day'] = "(str), Test for day. day('1'),day('1,6'),day('6-9'),day('last'),day('lastw'),day('lastw-last'),",
['deleteglobal'] = "(g), Deletes global with name g.",
['disable'] = "(), ",
['dusk'] = ", Variable with dusk time",
['enable'] = "(r), ",
['env'] = ", Variable to the rule environment. env.event is the event that triggered the rule",
['eval'] = "(str), Interprest a string as EventScript",
['fjson'] = "(str), Convert json encoded string to Lua value.",
['fmt'] = "(...), same as string.format(...)",
['global'] = "(str), ",
['idname'] = "(<ID>), Returns HT name of deviceID",
['listglobals'] = "(), Returns table with names of all Fibaro globals",
['log'] = "(...), Logs a message to console, arguments same as fmt(...)",
['match'] = "(), ",
['max'] = "(...), Returns max of list of numbers",
['midnight'] = "Variable with epoch time of last midnight",
['min'] = "(...), Returns min of list of numbers",
['month'] = "(str), Test for month. month('may'),month('may-sep')",
['now'] = ", Variable with seconds since midnight",
['num'] = "(str), Convert string to number",
['once'] = "(expr), ",
['osdate'] = "(str), same as os.date(str)",
['ostime'] = "(t), same as os.time(t)",
['pack'] = ", Packs multiple value return into a Lua table",
['post'] = "(e,t), ",
['publish'] = "(e), ",
['redaily'] = "<internal>",
['remote'] = "(<ID>,e), Sends event to another QA",
['remove'] = "(l,i), Remove element with index i from table l",
['return'] = ", ",
['rnd'] = "(n1,n2), Returns random number benween n1 and n2 inclusive",
['round'] = "(n), Rounds number up or down to whole number. math.floor(0.5+n) ",
['sign'] = "(n), Returns sign of number. -1, 0 , 1",
['size'] = "(l), Returns size of Lua table or length of string",
['sort'] = "(l), Sorts a Lua table",
['str'] = "(v), Converts Lua value to string",
['subscribe'] = "(e), Subscribe on event",
['sum'] = "(...), Sum a list of numbers",
['sunrise'] = ", Variable with sunrise time.",
['sunset'] = ", Variable with sunset time.",
['time'] = "(str), Converst string to time value.",
['tjson'] = "(v), Converst Lua value to json string",
['trace'] = ", ",
['trueFor'] = "(t,expr), ",
['type'] = "(t), Returns the Lua type of the value",
['wait'] = "(s), Sleeps the rule s seconds.",
['wday'] = "(str), Test for day. wday('mon-thu')",
['wnum'] = ", Variable with week number.",
['yield'] = ", ",
['~='] = ", Not equal operator",
['<ID>:B=..'] = ", fibaro.call(<ID>,'setB',<val>)",
['<ID>:G=..'] = ", fibaro.call(<ID>,'setG',<val>)",
['<ID>:HTname'] = ", Returns HT name of id.",
['<ID>:R=..'] = ", fibaro.call(<ID>,'setR',<val>)",
['<ID>:W=..'] = ", fibaro.call(<ID>,'setW',<val>)",
['<ID>:access'] = ", ",
['<ID>:alarm'] = ", ",
['<ID>:alarm=..'] = ", ",
['<ID>:alarmBreached'] = ", ",
['<ID>:alarmSafe'] = "",
['<ID>:allAlarmBreached'] = "",
['<ID>:allArmed'] = "",
['<ID>:allWillArm'] = "",
['<ID>:anyAlarmSafe'] = "",
['<ID>:anyDisarmed'] = "",
['<ID>:armed'] = "",
['<ID>:armed=..'] = "",
['<ID>:bat'] = ", fibaro.getValue(<ID>,'batteryLevel')",
['<ID>:breached'] = "",
['<ID>:btn=..'] = "",
['<ID>:central'] = "",
['<ID>:child'] = "",
['<ID>:close'] = "",
['<ID>:color=..'] = "",
['<ID>:coolingThermostatSetpoint'] = "",
['<ID>:coolingThermostatSetpoint=..'] = "",
['<ID>:coolingThermostatSetpointCapabilitiesMax'] = "",
['<ID>:coolingThermostatSetpointCapabilitiesMin'] = "",
['<ID>:coolingThermostatSetpointFuture'] = "",
['<ID>:coolingThermostatSetpointStep'] = "",
['<ID>:dID'] = "",
['<ID>:defaultPartyTime=..'] = "",
['<ID>:defemail=..'] = "",
['<ID>:dim=..'] = "",
['<ID>:disarmed'] = "",
['<ID>:email=..'] = "",
['<ID>:heatingThermostatSetpoint'] = "",
['<ID>:heatingThermostatSetpoint=..'] = "",
['<ID>:heatingThermostatSetpointCapabilitiesMax'] = "",
['<ID>:heatingThermostatSetpointCapabilitiesMin'] = "",
['<ID>:heatingThermostatSetpointFuture'] = "",
['<ID>:heatingThermostatSetpointStep'] = "",
['<ID>:interval=..'] = "",
['<ID>:isAllOn'] = "",
['<ID>:isAnyOff'] = "",
['<ID>:isClosed'] = ", fibaro.getValue(<ID>,'value')",
['<ID>:isLocked'] = ", same as <ID>:isSecure",
['<ID>:isOff'] = "",
['<ID>:isOn'] = "",
['<ID>:isOpen'] = "",
['<ID>:isSecure'] = "",
['<ID>:isUnlocked'] = "",
['<ID>:isUnsecure'] = "",
['<ID>:kill'] = "",
['<ID>:last'] = ", Returns last modified time",
['<ID>:levelDecrease'] = ", fibaro.call(<ID>,'setLevelDecrease')",
['<ID>:levelIncrease'] = ", fibaro.call(<ID>,'setLevelIncrease')",
['<ID>:levelStop'] = ", fibaro.call(<ID>,'stopLevelChange')",
['<ID>:lock'] = "",
['<ID>:lux'] = ", fibaro.getValue(<ID>,'value')",
['<ID>:manual'] = "",
['<ID>:mode=..'] = "",
['<ID>:msg=..'] = "",
['<ID>:mute=..'] = "",
['<ID>:name'] = ", Returns name of device/QA",
['<ID>:off'] = ", fibaro.call(<ID>,'turnOff')",
['<ID>:on'] = ", fibaro.call(<ID>,'turnOn')",
['<ID>:open'] = "",
['<ID>:pause'] = "",
['<ID>:play'] = "",
['<ID>:position'] = "",
['<ID>:position=..'] = "",
['<ID>:positions=..'] = "",
['<ID>:power'] = "",
['<ID>:power=..'] = "",
['<ID>:profile'] = "",
['<ID>:profile=..'] = "",
['<ID>:removeSchedule'] = "",
['<ID>:retryScheduleSynchronization'] = "",
['<ID>:roomName'] = "",
['<ID>:safe'] = "",
['<ID>:scene'] = "",
['<ID>:schedule=..'] = "",
['<ID>:scheduleState=..'] = "",
['<ID>:secure'] = "",
['<ID>:setAllSchedules'] = "",
['<ID>:setpointMode=..'] = "",
['<ID>:start'] = "",
['<ID>:start=..'] = "",
['<ID>:state'] = ", fibaro.getValue(<ID>,'state')",
['<ID>:state=..'] = ", fibaro.call(<ID>,'setValue','state',<value>)",
['<ID>:stop'] = "",
['<ID>:targetLevel=..'] = "",
['<ID>:temp'] = "",
['<ID>:thermostatFanMode'] = "",
['<ID>:thermostatFanMode=..'] = "",
['<ID>:thermostatFanOff'] = "",
['<ID>:thermostatMode'] = "",
['<ID>:thermostatMode=..'] = "",
['<ID>:thermostatModeFuture'] = "",
['<ID>:thermostatSetpoint=..'] = ", fibaro.call(<ID>,'setThermostatSetpoint',<value>)",
['<ID>:time'] = "",
['<ID>:time=..'] = "",
['<ID>:toggle'] = "",
['<ID>:trigger'] = "",
['<ID>:unlock'] = "",
['<ID>:unsecure'] = "",
['<ID>:value'] = ", fibaro.getValue(<ID>,'value')",
['<ID>:value=..'] = ", fibaro.call(<ID>,'setValue','value',<value>)",
['<ID>:volume'] = ", fibaro.getValue(<ID>,'volume')",
['<ID>:volume=..'] = ", fibaro.call(<ID>,'setValue','volume',<value>)",
['<ID>:wake'] = ", ",
['<ID>:willArm'] = ", ",
}
